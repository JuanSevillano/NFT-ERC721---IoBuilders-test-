// SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.8.0;

import '@openzeppelin/contracts/utils/Strings.sol';
import '@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol';
import '@openzeppelin/contracts/utils/Counters.sol';
import 'hardhat/console.sol';

contract MyNFT is ERC721URIStorage {
    using Counters for Counters.Counter;
    Counters.Counter private _tokenIds;

    string baseSvg =
        "<svg xmlns='http://www.w3.org/2000/svg' preserveAspectRatio='xMinYMin meet' viewBox='0 0 350 350'><style>.base { fill: white; font-family: serif; font-size: 24px; }</style><rect width='100%' height='100%' fill='black' /><text x='50%' y='50%' class='base' dominant-baseline='middle' text-anchor='middle'>";

    string[] firstWords = [
        'CALI',
        'MEDELLIN',
        'BOGOTA',
        'CARTAGENA',
        'SANTA_MARTA',
        'SAN_ANDRES',
        'SAN_CIPRIANO',
        'SAN_AGUSTIN',
        'BARRANQUILLA',
        'SINCELEJO',
        'COVENAS'
    ];

    string[] secondWords = [
        'PACIFICO',
        'GUAJIRA',
        'ORINOQUIA',
        'BOLIVAR',
        'CARIBE',
        'AMAZONAS',
        'PUTUMAYO',
        'NARINO',
        'CAUCA',
        'CUNDINAMARCA',
        'CAQUETA',
        'HUILA'
    ];

    string[] thirdWords = [
        'CALIDO',
        'PARAMO',
        'TEMPLADO',
        'NEVADO',
        'PLAYA',
        'SELVA',
        'MONTANA',
        'CORDILLERA',
        'PICO',
        'LAGUNA',
        'VALLE',
        'QUEBRADA'
    ];

    constructor() ERC721('SeviNFT', 'SEVI') {
        console.log('My first nft contract @juansevillano');
    }

    function pickRandomFirstWord(uint256 tokenId)
        public
        view
        returns (string memory)
    {
        uint256 rand = random(
            string(abi.encodePacked('FIRST_WORD', Strings.toString(tokenId)))
        );

        rand = rand % firstWords.length;
        return firstWords[rand];
    }

    function pickRandomSecondWord(uint256 tokenId)
        public
        view
        returns (string memory)
    {
        uint256 rand = random(
            string(abi.encodePacked('SECOND_WORD', Strings.toString(tokenId)))
        );

        rand = rand % secondWords.length;
        return secondWords[rand];
    }

    function pickRandomThirdWord(uint256 tokenId)
        public
        view
        returns (string memory)
    {
        uint256 rand = random(
            string(abi.encodePacked('THIRD_WORD', Strings.toString(tokenId)))
        );

        rand = rand % thirdWords.length;
        return thirdWords[rand];
    }
    

    function random(string memory input) internal pure returns (uint256) {
        return uint256(keccak256(abi.encodePacked(input)));
    }


    function makeAnNFT() public {
        // Getting current token id
        uint256 newItemId = _tokenIds.current();

        // Mint nft using msg.sender
        _safeMint(msg.sender, newItemId);
        _setTokenURI(
            newItemId,
            'data:application/json;base64,'
        );

        console.log(
            'An NFT w/ ID %s has been minted to %s',
            newItemId,
            msg.sender
        );

        // increment counter for next id minted
        _tokenIds.increment();
    }
}
